// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder", "fullTextSearchPostgres", "omitApi"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DATABASE_DIRECT_URL")
  relationMode = "prisma"
}

model User {
  id                   String    @id @default(cuid())
  name                 String?
  email                String?   @unique
  emailVerified        DateTime? @map("email_verified")
  image                String?
  isMachine            Boolean   @default(false) @map("is_machine")
  // password data
  passwordHash         String?   @map("password_hash")
  invalidLoginAttempts Int       @default(0) @map("invalid_login_attempts")
  lockedAt             DateTime? @map("locked_at")

  plan                   String    @default("free")
  /// Stripe subscription ID（aka customer ID）
  stripeId               String?   @unique @map("stripe_id")
  /// day of the month when the billing cycle starts
  billingCycleStart      Int?      @map("billing_cycle_start")
  /// date when the billing cycle ends
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
  paymentFailedAt        DateTime? @map("payment_failed_at")

  // Limits
  /// Maximum storage limit in megabytes for webpage snapshots and screenshots
  /// The default value is 1024MB (1GB)
  storageInMegabyteLimit Int @default(1024) @map("storage_in_megabytes_limit")
  /// Current storage usage in megabytes for webpage snapshots and screenshots
  storageUsage           Int @default(0) @map("storage_usage")
  /// Current AI usage in tokens
  aiTokensUsage          Int @default(0) @map("ai_tokens_usage")
  /// Maximum AI usage in tokens
  aiTokensLimit          Int @default(1000) @map("ai_tokens_limit")

  referredByUserId String? @map("referred_by_user_id")

  createdAt  DateTime @default(now()) @map("created_at")
  /// email subscription
  subscribed Boolean  @default(true)
  /// where the user came from
  source     String?  @map("source")

  // relational data
  accounts  Account[]
  sessions  Session[]
  snapshots Snapshot[]
  tokens    Token[]

  @@index(source)
  @@map("users")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String? @map("refresh_token") @db.Text
  refresh_token_expires_in Int?    @map("refresh_token_expires_in")
  access_token             String? @map("access_token") @db.Text
  expires_at               Int?    @map("expires_at")
  token_type               String? @map("token_type")
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}
