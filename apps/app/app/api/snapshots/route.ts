import { genSnapshotTags } from '@/lib/functions/snapshots/gen-tags';
import { getSnapshots } from '@/lib/functions/snapshots/get-snapshots';
import { parseRequestBody } from '@/lib/utils';
import { withSession } from '@repo/auth/session';
import prisma, { type Prisma } from '@repo/database';
import {
  SnapshotSchema,
  createSnapshotSchema,
  getSnapshotsQuerySchema,
} from '@repo/zod/schemas/snapshots';
import { NextResponse } from 'next/server';

// GET /api/snapshots – get snapshots
export const GET = withSession(async ({ req, session }) => {
  const { page, pageSize, withTags, sort, tagName, tagIds, search } =
    getSnapshotsQuerySchema.parse(await parseRequestBody(req));
  const { snapshots, pagination } = await getSnapshots({
    userId: session.user.id,
    page,
    pageSize,
    withTags,
    sort,
    tagName,
    tagIds,
    search,
    withCount: true,
  });

  return NextResponse.json({
    items: SnapshotSchema.array().parse(snapshots),
    pagination,
  });
});

// POST /api/snapshots – create a new snapshots
export const POST = withSession(async ({ req, session }) => {
  const { snapshotFileKey, title, snippet, tags, screenshotFileKey, pageUrl } =
    createSnapshotSchema.parse(await parseRequestBody(req));

  const newTags = await genSnapshotTags({
    title,
    snippet,
    tags,
    imageBase64: screenshotFileKey,
  });

  const newSnapshot = await prisma.snapshot.create({
    data: {
      screenshotFileKey: screenshotFileKey,
      snapshotFileKey: snapshotFileKey,
      pageUrl: pageUrl,
      userId: session.user.id,
      title: title || '',
      storageUsage: 0, // TODO: calculate storage usage
      aiTokensUsage: 0, // TODO: calculate ai tokens usage
    },
  });
  const createManyTagsData: Prisma.TagCreateManyInput[] =
    newTags.tags.allTags.map((tag) => ({
      name: tag,
      userId: session.user.id,
      isAutoGenerated: true,
      snapshots: {
        connect: {
          id: newSnapshot.id,
        },
      },
    }));

  // add user-defined tags
  if (tags) {
    createManyTagsData.push(
      ...tags.map((tag) => ({
        name: tag,
        userId: session.user.id,
        isAutoGenerated: false,
        snapshots: {
          connect: {
            id: newSnapshot.id,
          },
        },
      }))
    );
  }
  await prisma.tag.createMany({
    data: createManyTagsData,
  });

  return NextResponse.json(newSnapshot);
});
